<?phpclass Uploadapi extends CI_Controller {	private $_title = '文件上传';	private $_tool = '';	private $_thumbPath = '';	private $_imageSize = array(                    'user'=>array('width'=>120, 'height'=>120),					'skill'=>array('width'=>120, 'height'=>120),                    'exchange' => array('width' => 120, 'height' => 120),					'exchange'=>array('width'=>200, 'height'=>200),            );	public function __construct() {		parent::__construct();		$this->load->model('User_model', '', TRUE);		$this->load->model('Attachment_model', '', TRUE);		$this->load->helper(array('url', 'my_fileoperate', 'my_ajaxerror'));		$this->_beforeFilter();	}    private function _upload($model = '', $field, $filePath = './uploads', $ext = 'gif|jpg|jpeg|png', $maxSize = '4048') {        $baseDir = $filePath;	    $config['upload_path'] = createDateTimeDir($baseDir);	    $config['file_name'] = getUniqueFileName($baseDir);	    $config['allowed_types'] = $ext;	    $config['max_size'] = $maxSize;	    $this->load->library('upload', $config);	    $this->_thumbPath = substr($config['upload_path'], 2);	    if ($this->upload->do_upload($field)) {	        return $this->upload->data();	    } else {	        return false;	    }	    return fasle;	}    private function _resize($fileName, $width = '100', $height = '100', $thumbMarker = '_thumb') {		$this->config->load('image_config', TRUE);		$imageConfig = $this->config->item('image_config');		$imageConfig['source_image'] = $fileName;		$imageConfig['new_image'] = $fileName;		$imageConfig['width'] = $width;		$imageConfig['height'] = $height;		$imageConfig['thumb_marker'] = $thumbMarker;		$this->load->library('image_lib');		$this->image_lib->initialize($imageConfig);		return $this->image_lib->resize();	}	private function _crop($fileName, $width = '100', $height = '100', $x, $y, $thumbMarker = '_thumb') {		$this->config->load('image_config', TRUE);		$imageConfig = $this->config->item('image_config');		$imageConfig['source_image'] = $fileName;		$imageConfig['new_image'] = $fileName;		$imageConfig['width'] = $width;		$imageConfig['height'] = $height;		$imageConfig['x_axis'] = $x;		$imageConfig['y_axis'] = $y;		$imageConfig['thumb_marker'] = $thumbMarker;		$imageConfig['maintain_ratio'] = false;		$this->load->library('image_lib');		$this->image_lib->initialize($imageConfig);		return $this->image_lib->crop();	}	private function _watermark($sourcFileName, $watermarkPath, $vrt = 'bottom', $hor = 'right') {		$this->config->load('watermark_config', TRUE);		$watermarkConfig = $this->config->item('watermark_config');		$watermarkConfig['source_image'] = $sourcFileName;		$watermarkConfig['wm_overlay_path'] = $watermarkPath;		$watermarkConfig['wm_vrt_alignment'] = $vrt;		$watermarkConfig['wm_hor_alignment'] = $hor;		$this->load->library('image_lib');		$this->image_lib->initialize($watermarkConfig);		return $this->image_lib->watermark();	}    //批量上传图片进行打水印,批量，上传图片用图片一个插件	public function uploadImageByW() {	    if ($_POST) {	    	$model = $_POST['model'];			$baseDir = './uploads';			$verifyToken = md5('unique_salt' . $_POST['timestamp']);			if (!empty($_FILES) && $_POST['token'] == $verifyToken) {				if (isset($_FILES['field']) && is_uploaded_file($_FILES['field']['tmp_name']) && $_FILES['field']['error'] == 0) {					$uploadFile = $_FILES['field'];				    $uploadPath = createDateTimeDir($baseDir);				    $uniqueFileName = getUniqueFileName($uploadPath);				    $fileExt = getFileExt($uploadFile['name']);				    $uploadFile['name'] = $uniqueFileName.'.'.$fileExt;					$uploadFile['filename'] = $uploadPath.'/'.$uploadFile['name'];					$size = $uploadFile['size'];					if(@move_uploaded_file($uploadFile['tmp_name'], $uploadFile['filename'])) {						if ($this->_resize($uploadFile['filename'], $this->_imageSize[$model]['width'], $this->_imageSize[$model]['height'])) {							$fields = array(					              'path'=>substr($uploadFile['filename'], 2),					              'width'=>0,					              'height'=>0,					              'size'=>$size,					              'alt'=>''					              );					        $attachmentId = $this->Attachment_model->save($fields);							if ($attachmentId) {							    $path = substr($uploadFile['filename'], 2);							    $tmp_image_arr = $this->_fliter_image_path($path);							    printAjaxData(array('id'=>$attachmentId, 'path'=>$path, 'path_url'=>$tmp_image_arr['path'], 'path_thumb_url'=>$tmp_image_arr['path_thumb']));							} else {							    printAjaxError('fail', '上传图片失败');							}						} else {						    printAjaxError('fail', '生成缩略图失败');						}					} else {					    printAjaxError('fail', '复制文件错误');					}				} else {				    printAjaxError('field', 'field构造错误');				}			} else {			    printAjaxError('token', 'token参数错误');			}		}	}    public function uploadImage() {    	set_time_limit(0);    	$model = $this->input->post('model', TRUE);    	$field = $this->input->post('field', TRUE);		$ret = $this->_upload($model, $field);		if (!$ret) {		    printAjaxError('fail', '请选择上传的文件');		}		if ($this->_resize("./".$this->_thumbPath . '/' . $ret['raw_name'] . $ret['file_ext'], $this->_imageSize[$model]['width'], $this->_imageSize[$model]['height'])) {			$attachment = array(			              'path'=>$this->_thumbPath . '/' . $ret['raw_name'] . $ret['file_ext'],			              'width'=>$ret['image_width'],			              'height'=>$ret['image_height'],			              'size'=>$ret['file_size'],			              'alt'=>$ret['file_name']			              );			$ret_id = $this->Attachment_model->save($attachment);			$path = $this->_thumbPath.'/'.$ret['raw_name'].$ret['file_ext'];			$tmp_image_arr = $this->_fliter_image_path($path);			printAjaxData(array('id'=>$ret_id, 'path'=>$path, 'path_url'=>$tmp_image_arr['path'], 'path_thumb_url'=>$tmp_image_arr['path_thumb']));		} else {		    echo $this->upload->display_errors();		}	}    //修改用户头像	public function change_user_image() {		if (!$this->session->userdata("user_id")) {			printAjaxError('login', '请登录');		}		if ($_POST) {			$user_id = $this->session->userdata("user_id");			$user_info = $this->User_model->get('id', array('id'=>$user_id));			if (!$user_info) {				printAjaxError('fail', '用户信息不存在');			}			$model = $_POST['model'];			$baseDir = './uploads';			$verifyToken = md5('unique_salt' . $_POST['timestamp']);			if (!empty($_FILES) && $_POST['token'] == $verifyToken) {				if (isset($_FILES['field']) && is_uploaded_file($_FILES['field']['tmp_name']) && $_FILES['field']['error'] == 0) {					$uploadFile = $_FILES['field'];					$uploadPath = createDateTimeDir($baseDir);					$uniqueFileName = getUniqueFileName($uploadPath);					$fileExt = getFileExt($uploadFile['name']);					$uploadFile['name'] = $uniqueFileName.'.'.$fileExt;					$uploadFile['filename'] = $uploadPath.'/'.$uploadFile['name'];					$size = $uploadFile['size'];					if(@move_uploaded_file($uploadFile['tmp_name'], $uploadFile['filename'])) {						if ($this->_resize($uploadFile['filename'], $this->_imageSize[$model]['width'], $this->_imageSize[$model]['height'])) {							$fields = array(									'path'=>substr($uploadFile['filename'], 2),									'width'=>0,									'height'=>0,									'size'=>$size,									'alt'=>''							);							$attachmentId = $this->Attachment_model->save($fields);							if ($attachmentId) {								$path = substr($uploadFile['filename'], 2);								$tmp_image_arr = $this->_fliter_image_path($path);								if($model == 'user'){                                    if(!$this->User_model->save(array('path'=>$path), array('id'=>$user_info['id']))) {                                        printAjaxError('fail', '用户头像修改失败');                                    }                                }								printAjaxData(array('id'=>$attachmentId, 'path'=>$path, 'path_url'=>$tmp_image_arr['path'], 'path_thumb_url'=>$tmp_image_arr['path_thumb']));							} else {								printAjaxError('fail', '上传图片失败');							}						} else {							printAjaxError('fail', '生成缩略图失败');						}					} else {						printAjaxError('fail', '复制文件错误');					}				} else {					printAjaxError('field', 'field构造错误');				}			} else {				printAjaxError('token', 'token参数错误');			}		}	}    public function uploadImage3() {    	if ($_POST) {    		$baseDir = './uploads';    		$model = 'exchange';                $limit = 5;    		$ret = array();    		if ($_FILES['path_file']['tmp_name']) {                      if(count($_FILES['path_file']['tmp_name']) > $limit){                          printAjaxError('fail','最多上传'.$limit.'张图片');                      }    			foreach ($_FILES['path_file']['tmp_name'] as $key=>$value) {    				if (is_uploaded_file($value)) {    					$uploadPath = createDateTimeDir($baseDir);    					$uniqueFileName = getUniqueFileName($uploadPath);    					$fileExt = 'png';    					$uploadFile['name'] = $uniqueFileName.'.'.$fileExt;    					$uploadFile['filename'] = $uploadPath.'/'.$uploadFile['name'];    					if(@move_uploaded_file($value, $uploadFile['filename'])) {    						if ($this->_resize($uploadFile['filename'], $this->_imageSize[$model]['width'], $this->_imageSize[$model]['height'])) {    							if ($model == 'house' || $model == 'parking') {    								$this->_resize($uploadFile['filename'], $this->_imageSize[$model]['max_width'], $this->_imageSize[$model]['max_height'], '_max');    							}    							//打水印    							$watermarkInfo = $this->Watermark_model->get('*', array('id'=>1, 'is_open'=>1));    							if ($watermarkInfo && $watermarkInfo['path']) {    								$location = explode(',', $watermarkInfo['location']);    								$this->_watermark($uploadFile['filename'], "./".$watermarkInfo['path'], $location[0], $location[1]);    							}    							$fields = array(    									'path'=>substr($uploadFile['filename'], 2),    									'width'=>0,    									'height'=>0,    									'size'=>0,    									'alt'=>''    							);    							$attachmentId = $this->Attachment_model->save($fields);    							if ($attachmentId) {    								$ret[] = array('id'=>$attachmentId, 'field'=>"r=".rand(10000, 99999)."",  'file_path'=>substr($uploadFile['filename'], 2));    							}    						}    					}    				}    			}    		}                    printAjaxData($ret);    	}    }	private function _fliter_image_path($image_path = NULL) {	    $path = '';	    $path_thumb = '';	    if ($image_path) {	        $path = base_url().$image_path;	        $path_thumb = base_url().preg_replace('/\./', '_thumb.', $image_path);	    }	    return array('path'=>$path, 'path_thumb'=>$path_thumb);	}	private function _beforeFilter() {		$sid = $this->input->get('sid');		if ($sid && strlen($sid) > 0) {			$this->session->parseSessionId(preg_replace('/sid-/', '', $sid));		}	}}/* End of file upload.php *//* Location: ./application/admin/controllers/upload.php */