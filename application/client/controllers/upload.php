<?phpclass Upload extends CI_Controller {    private $_title = '文件上传';    private $_tool = '';    private $_thumbPath = '';    private $_imageSize = array('exchange' => array('width' => 120, 'height' => 120),        'watermark' => array('width' => 24, 'height' => 24),        'path' => array('width' => 100, 'height' => 100),        'category_big_path' => array('width' => 750, 'height' => 440),    );    public function __construct() {        parent::__construct();        $this->load->model('Attachment_model', '', TRUE);        $this->load->model('User_model', '', TRUE);        $this->load->model('Watermark_model', '', TRUE);        $this->load->helper(array('my_fileoperate'));    }    private function _upload($model = '', $field, $filePath = './uploads', $ext = 'gif|jpg|jpeg|png', $maxSize = '4048') {        $baseDir = $filePath;        $config['upload_path'] = createDateTimeDir($baseDir);        $config['file_name'] = getUniqueFileName($baseDir);        $config['allowed_types'] = $ext;        $config['max_size'] = $maxSize;        $this->load->library('upload', $config);        $this->_thumbPath = substr($config['upload_path'], 2);        if ($this->upload->do_upload($field)) {            return $this->upload->data();        } else {            return false;        }        return fasle;    }    private function _resize($fileName, $width = '100', $height = '100', $thumbMarker = '_thumb') {        $this->config->load('image_config', TRUE);        $imageConfig = $this->config->item('image_config');        $imageConfig['source_image'] = $fileName;        $imageConfig['new_image'] = $fileName;        $imageConfig['width'] = $width;        $imageConfig['height'] = $height;        $imageConfig['thumb_marker'] = $thumbMarker;        $this->load->library('image_lib');        $this->image_lib->initialize($imageConfig);        return $this->image_lib->resize();    }    //批量上传图片进行打水印,批量，上传图片用图片一个插件    public function uploadImageByW() {        if ($_POST) {            $model = $_POST['model'];            $baseDir = './uploads';            $verifyToken = md5('unique_salt' . $_POST['timestamp']);            if (!empty($_FILES) && $_POST['token'] == $verifyToken) {                if (isset($_FILES['Filedata']) && is_uploaded_file($_FILES['Filedata']['tmp_name']) && $_FILES['Filedata']['error'] == 0) {                    $uploadFile = $_FILES['Filedata'];                    $uploadPath = createDateTimeDir($baseDir);                    $uniqueFileName = getUniqueFileName($uploadPath);                    $fileExt = getFileExt($uploadFile['name']);                    $uploadFile['name'] = $uniqueFileName . '.' . $fileExt;                    $uploadFile['filename'] = $uploadPath . '/' . $uploadFile['name'];                    $size = $uploadFile['size'];                    if (@move_uploaded_file($uploadFile['tmp_name'], $uploadFile['filename'])) {                        if ($this->_resize($uploadFile['filename'], $this->_imageSize[$model]['width'], $this->_imageSize[$model]['height'])) {                            $fields = array(                                'path' => substr($uploadFile['filename'], 2),                                'width' => 0,                                'height' => 0,                                'size' => $size,                                'alt' => ''                            );                            $attachmentId = $this->Attachment_model->save($fields);                            if ($attachmentId) {                                printAjaxData(array('id' => $attachmentId, 'file_path' => substr($uploadFile['filename'], 2), 'size' => $size, 'ext' => $fileExt));                            } else {                                printAjaxError('fail');                            }                        } else {                            printAjaxError('上传失败');                        }                    } else {                        printAjaxError('上传失败');                    }                } else {                    printAjaxError('上传失败');                }            } else {                printAjaxError('上传失败');            }        }    }    public function uploadImage() {        $model = $this->input->post('model', TRUE);        $field = $this->input->post('field', TRUE);        $ret = $this->_upload($model, $field);        //用户头像        if (!(get_cookie('user_id') || get_cookie('admin_username'))) {            printAjaxError('fail', '您尚未登录!');        }        if (!$ret) {            printAjaxError('fail', '请选择上传的文件');        }        if ($this->_resize("./" . $this->_thumbPath . '/' . $ret['raw_name'] . $ret['file_ext'], $this->_imageSize[$model]['width'], $this->_imageSize[$model]['height'])) {            $attachment = array(                'path' => $this->_thumbPath . '/' . $ret['raw_name'] . $ret['file_ext'],                'width' => $ret['image_width'],                'height' => $ret['image_height'],                'size' => $ret['file_size'],                'alt' => $ret['file_name']            );            $ret_id = $this->Attachment_model->save($attachment);            if ($model === 'path') {                $this->User_model->save(array('path' => $this->_thumbPath . '/' . $ret['raw_name'] . $ret['file_ext']), "id = " . get_cookie('user_id'));            }            printAjaxData(array('id' => $ret_id, 'field' => "r=" . rand(10000, 99999) . "", 'file_path' => $this->_thumbPath . '/' . $ret['raw_name'] . $ret['file_ext']));        } else {            echo $this->upload->display_errors();        }    }          public function uploadImage3() {    	if ($_POST) {    		$baseDir = './uploads';    		$model = $_POST['model'];            $limit = $_POST['limit'];    		$ret = array();              		if ($_FILES['path_file']['tmp_name']) {                if(count($_FILES['path_file']['tmp_name']) > $limit){                    printAjaxError('fail','最多上传'.$limit.'张图片');                }    			foreach ($_FILES['path_file']['tmp_name'] as $key=>$value) {    				if (is_uploaded_file($value)) {    					$uploadPath = createDateTimeDir($baseDir);    					$uniqueFileName = getUniqueFileName($uploadPath);    					$fileExt = 'png';    					$uploadFile['name'] = $uniqueFileName.'.'.$fileExt;    					$uploadFile['filename'] = $uploadPath.'/'.$uploadFile['name'];    					if(@move_uploaded_file($value, $uploadFile['filename'])) {    						if ($this->_resize($uploadFile['filename'], $this->_imageSize[$model]['width'], $this->_imageSize[$model]['height'])) {    							if ($model == 'house' || $model == 'parking') {    								$this->_resize($uploadFile['filename'], $this->_imageSize[$model]['max_width'], $this->_imageSize[$model]['max_height'], '_max');    							}    							//打水印    							$watermarkInfo = $this->Watermark_model->get('*', array('id'=>1, 'is_open'=>1));    							if ($watermarkInfo && $watermarkInfo['path']) {    								$location = explode(',', $watermarkInfo['location']);    								$this->_watermark($uploadFile['filename'], "./".$watermarkInfo['path'], $location[0], $location[1]);    							}    							$fields = array(    									'path'=>substr($uploadFile['filename'], 2),    									'width'=>0,    									'height'=>0,    									'size'=>0,    									'alt'=>''    							);    							$attachmentId = $this->Attachment_model->save($fields);    							if ($attachmentId) {    								$ret[] = array('id'=>$attachmentId, 'field'=>"r=".rand(10000, 99999)."",  'file_path'=>substr($uploadFile['filename'], 2));    							}    						}    					}    				}    			}    		}                    printAjaxData($ret);    	}    }}/* End of file upload.php *//* Location: ./application/admin/controllers/upload.php */